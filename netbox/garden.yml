---
kind: Module
type: helm
name: netbox
repo: https://charts.boo.tc
chart: netbox
version: 4.0.1
timeout: 600
serviceResource:
  kind: Deployment
  name: netbox
dependencies:
  - netbox-app-infra
  - cert-manager
  - ingress-nginx
values:
  internalIPs: ['0.0.0.0']
  image:
    tag: v3.1-1.5.1
  autoscaling:
    enabled: true
    maxReplicas: 10
  remoteAuth:
    enabled: true
    backend: netbox.authentication.RemoteUserBackend
    header: HTTP_X_VOUCH_USER
    autoCreateUser: true
    groupSyncEnabled: true
    groupHeader: HTTP_X_VOUCH_GROUPS
    superusers:
      - kevin.scheunemann@takeoff.com
    staffUsers:
      - kevin.scheunemann@takeoff.com
    groupSeparator: ','
  ingress:
    enabled: true
    annotations:
      cert-manager.io/issuer: "letsencrypt-staging"
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/auth-response-headers: X-Vouch-User
      nginx.ingress.kubernetes.io/auth-signin: https://vouch-${providers.kubernetes.outputs.app-namespace}.takeofftech.org/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err
      nginx.ingress.kubernetes.io/auth-snippet: |
        auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
        auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
        auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
      nginx.ingress.kubernetes.io/auth-url: https://vouch-${providers.kubernetes.outputs.app-namespace}.takeofftech.org/validate
      nginx.ingress.kubernetes.io/configuration-snippet: |
        auth_request_set $auth_resp_x_vouch_groups $upstream_http_x_vouch_idp_claims_groups;
        access_by_lua_block {
          ngx.req.set_header("X-Vouch-Groups",  string.gsub(ngx.var.auth_resp_x_vouch_groups, "\"", ""))
        }
    hosts:
      - host: ${providers.kubernetes.outputs.app-namespace}.takeofftech.org
        paths:
          - /
    tls:
     - secretName: netbox-tls
       hosts:
         - ${providers.kubernetes.outputs.app-namespace}.takeofftech.org
  postgresql:
    enabled: false
  service:
    annotations:
      cloud.google.com/neg: '{"ingress": false}'
  externalDatabase:
    host: localhost
    port: 5432
    database: ${providers.kubernetes.outputs.app-namespace}
    username: ${providers.kubernetes.outputs.app-namespace}
    existingSecretName: psql-netbox-user
    existingSecretKey: postgresql-password
  storageBackend: storages.backends.gcloud.GoogleCloudStorage
  storageConfig:
    GS_BUCKET_NAME: ${runtime.services.netbox-app-infra.outputs.bucket.name}
    GS_DEFAULT_ACL: publicRead
    GS_QUERYSTRING_AUTH: true
  persistence:
    enabled: false
  serviceAccount:
    create: false
    name: ${providers.kubernetes.outputs.app-namespace}
  worker:
    autoscaling:
      enabled: true
  extraContainers:
  - name: cloud-sql-proxy
    image: gcr.io/cloudsql-docker/gce-proxy:1.27.0
    env:
      - name: CONNECTION_NAME
        valueFrom:
          secretKeyRef:
            name: cloudsql-instance
            key: connection_name
    command:
      - "/cloud_sql_proxy"
      - "-instances=$(CONNECTION_NAME)=tcp:5432"
    securityContext:
      runAsNonRoot: true
    resources:
      requests:
        memory: "256Mi"
        cpu:    "200m"
  housekeeping:
    enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 512Mi
  redis:
    enabled: false
  tasksRedis:
    host: ${runtime.services.netbox-app-infra.outputs.redis_host}
    port: 6379
  cachingRedis:
    host: ${runtime.services.netbox-app-infra.outputs.redis_host}
    port: 6379