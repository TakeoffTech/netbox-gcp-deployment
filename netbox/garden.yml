---
kind: Module
type: helm
name: netbox
repositoryUrl: https://github.com/scheuk/netbox-chart#develop
timeout: 1200
dependencies:
  - netbox-app-infra
  - netbox-secrets
  - cert-manager-config
  - ingress-nginx
variables:
  api_token: ${runtime.services.netbox-secrets.outputs.sha1_password}
values:
  internalIPs: ['0.0.0.0']
  image:
    repository: quay.io/netboxcommunity/netbox
    tag: ${var.netbox_version}
  autoscaling:
    enabled: true
    minReplicas: "${environment.name == 'prod' ? 2 : 1}"
    maxReplicas: 10
  superuser:
    name: admin
    email: admin@example.com
    password: ${runtime.services.netbox-secrets.outputs.password}
    apiToken: ${var.api_token}
  remoteAuth:
    enabled: "${var.disable_okta_auth ? true : false}"
    backend: netbox.authentication.RemoteUserBackend
    header: HTTP_X_VOUCH_USER
    autoCreateUser: true
    groupSyncEnabled: true
    groupHeader: HTTP_X_VOUCH_GROUPS
    superuserGroups:
      - ${runtime.services.netbox-app-infra.outputs.okta_admins_group} 
    staffGroups:
      - ${runtime.services.netbox-app-infra.outputs.okta_superadmins_group}
    groupSeparator: ','
  ingress:
    enabled: ${(runtime.services.netbox-app-infra.outputs.netbox_host != "" && !var.disable_okta_auth)}
    className: nginx
    annotations:
      cert-manager.io/issuer: "${environment.name == 'prod' ? 'letsencrypt-prod' : 'letsencrypt-staging'}"
    hosts:
      - host: "${runtime.services.netbox-app-infra.outputs.netbox_host == '' ? runtime.services.netbox-app-infra.outputs.external_ip : runtime.services.netbox-app-infra.outputs.netbox_host}"
        paths:
          - /
    tls:
     - secretName: netbox-tls
       hosts:
         - "${runtime.services.netbox-app-infra.outputs.netbox_host == '' ? runtime.services.netbox-app-infra.outputs.external_ip : runtime.services.netbox-app-infra.outputs.netbox_host}"
  postgresql:
    enabled: false
  service:
    annotations:
      cloud.google.com/neg: '{"ingress": false}'
  externalDatabase:
    host: localhost
    port: 5432
    database: ${providers.kubernetes.outputs.app-namespace}
    username: ${providers.kubernetes.outputs.app-namespace}
    existingSecretName: psql-netbox-user
    existingSecretKey: postgresql-password
  storageBackend: storages.backends.gcloud.GoogleCloudStorage
  storageConfig:
    GS_BUCKET_NAME: ${runtime.services.netbox-app-infra.outputs.bucket.name}
    GS_DEFAULT_ACL: publicRead
    GS_QUERYSTRING_AUTH: true
  metricsEnabled: true
  persistence:
    enabled: false
  serviceAccount:
    create: false
    name: ${providers.kubernetes.outputs.app-namespace}
  worker:
    autoscaling:
      enabled: true
  extraContainers:
  - name: cloud-sql-proxy
    image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.8.1
    env:
      - name: CSQL_PROXY_INSTANCE_CONNECTION_NAME
        valueFrom:
          secretKeyRef:
            name: cloudsql-instance
            key: connection_name
    args:
      - "--structured-logs"
    securityContext:
      runAsNonRoot: true
    resources:
      requests:
        memory: "256Mi"
        cpu:    "200m"
  releaseCheck:
    url: https://api.github.com/repos/netbox-community/netbox/releases
  housekeeping:
    enabled: true
    extraContainers:
    - name: cloud-sql-proxy
      image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.8.1
      env:
        - name: CSQL_PROXY_INSTANCE_CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              name: cloudsql-instance
              key: connection_name
      args:
        - "--structured-logs"
      securityContext:
        runAsNonRoot: true
      resources:
        requests:
          memory: "256Mi"
          cpu:    "200m"
  redis:
    enabled: false
  tasksRedis:
    host: ${runtime.services.netbox-app-infra.outputs.redis_host}
    port: 6379
  cachingRedis:
    host: ${runtime.services.netbox-app-infra.outputs.redis_host}
    port: 6379
